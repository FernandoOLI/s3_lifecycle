name: Publish Python Package

on:
  push:
    branches:
      - develop
      - master

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools tomli gh-cli

      - name: Set Version for Develop
        if: github.ref == 'refs/heads/develop'
        id: dev_version
        run: |
          BASE_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml','rb'))['project']['version'])")
          DEV_COUNT=$(git tag --list "v${BASE_VERSION}.dev*" | wc -l)
          DEV_VERSION="${BASE_VERSION}.dev$((DEV_COUNT+1))"
          echo "DEV_VERSION=$DEV_VERSION" >> $GITHUB_ENV
          echo "Using dev version: $DEV_VERSION"

      - name: Build package
        run: python -m build --sdist --wheel --outdir dist

      - name: Publish to TestPyPI
        if: github.ref == 'refs/heads/develop'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: python -m twine upload --repository testpypi dist/*

      - name: Tag and Publish to PyPI
        if: github.ref == 'refs/heads/master'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml','rb'))['project']['version'])")
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git tag "v$VERSION"
          git push origin "v$VERSION"
          python -m twine upload dist/*
          gh release create "v$VERSION" dist/* --title "v$VERSION" --notes "Release $VERSION"
